# cysu v1.5.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ cysu

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_email.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –û—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
- –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SMTP
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models import User, EmailVerification, PasswordReset
from app.utils.email_service import EmailService
from datetime import datetime, timedelta
import random
import string

def test_email_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç email —Å–µ—Ä–≤–∏—Å"""
    app = create_app()
    
    with app.app_context():
        print("üìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ cysu")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = create_test_user()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º email —Å–µ—Ä–≤–∏—Å
        email_service = EmailService()
        
        print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è email —Å–µ—Ä–≤–∏—Å–∞:")
        from flask import current_app
        print(f"   - SMTP —Å–µ—Ä–≤–µ—Ä: {current_app.config.get('MAIL_SERVER')}")
        print(f"   - –ü–æ—Ä—Ç: {current_app.config.get('MAIL_PORT')}")
        print(f"   - TLS: {current_app.config.get('MAIL_USE_TLS')}")
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_app.config.get('MAIL_USERNAME')}")
        
        # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print(f"\nüîß –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        test_email_verification(email_service, test_user)
        
        # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        print(f"\nüîë –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
        test_password_reset(email_service, test_user)
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print(f"\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        test_verification_codes(test_user)
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        print(f"\nüîê –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
        test_reset_codes(test_user)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cleanup_test_data(test_user)
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = f"test_email_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    email = f"{username}@test.com"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = User.query.filter_by(username=username).first()
    if existing_user:
        return existing_user
    
    user = User(
        username=username,
        email=email,
        password="test_password",
        is_verified=False,
        is_subscribed=False
    )
    
    db.session.add(user)
    db.session.commit()
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    return user

def test_email_verification(email_service, user):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        print(f"   üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {user.email}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        verification_code = ''.join(random.choices(string.digits, k=6))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        verification = EmailVerification(
            user_id=user.id,
            email=user.email,
            code=verification_code,
            expires_at=datetime.utcnow() + timedelta(hours=24)
        )
        db.session.add(verification)
        db.session.commit()
        
        print(f"      ‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {verification_code}")
        print(f"      üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {verification.expires_at}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ email
        print(f"      üì§ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

def test_password_reset(email_service, user):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        print(f"   üîë –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {user.email}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ —Å–±—Ä–æ—Å–∞
        reset_code = ''.join(random.choices(string.digits, k=6))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        reset = PasswordReset(
            email=user.email,
            code=reset_code,
            expires_at=datetime.utcnow() + timedelta(hours=1)
        )
        db.session.add(reset)
        db.session.commit()
        
        print(f"      ‚úÖ –ö–æ–¥ —Å–±—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω: {reset_code}")
        print(f"      üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {reset.expires_at}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ email
        print(f"      üì§ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {e}")

def test_verification_codes(user):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {user.username}")
        
        verifications = EmailVerification.query.filter_by(user_id=user.id).all()
        
        if not verifications:
            print("      ‚ö†Ô∏è  –ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"      üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(verifications)}")
        
        for i, verification in enumerate(verifications, 1):
            is_expired = verification.expires_at < datetime.utcnow()
            status = "–ò—Å—Ç–µ–∫" if is_expired else "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
            
            print(f"      {i}. –ö–æ–¥: {verification.code}")
            print(f"         Email: {verification.email}")
            print(f"         –°—Ç–∞—Ç—É—Å: {status}")
            print(f"         –ò—Å—Ç–µ–∫–∞–µ—Ç: {verification.expires_at}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

def test_reset_codes(user):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        print(f"   üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {user.username}")
        
        resets = PasswordReset.query.filter_by(email=user.email).all()
        
        if not resets:
            print("      ‚ö†Ô∏è  –ö–æ–¥—ã —Å–±—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"      üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(resets)}")
        
        for i, reset in enumerate(resets, 1):
            is_expired = reset.expires_at < datetime.utcnow()
            status = "–ò—Å—Ç–µ–∫" if is_expired else "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
            
            print(f"      {i}. –ö–æ–¥: {reset.code}")
            print(f"         Email: {reset.email}")
            print(f"         –°—Ç–∞—Ç—É—Å: {status}")
            print(f"         –ò—Å—Ç–µ–∫–∞–µ—Ç: {reset.expires_at}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞: {e}")

def cleanup_test_data(user):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        verifications_count = EmailVerification.query.filter_by(user_id=user.id).count()
        EmailVerification.query.filter_by(user_id=user.id).delete()
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        resets_count = PasswordReset.query.filter_by(email=user.email).count()
        PasswordReset.query.filter_by(email=user.email).delete()
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.session.delete(user)
        db.session.commit()
        
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {verifications_count} –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {resets_count} –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞")
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        test_email_service()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
