# cysu v1.5.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π cysu

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_database.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
- –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models import User, Subject, Material, Submission, Payment, Ticket, TicketMessage, Notification, ChatMessage
from werkzeug.security import generate_password_hash
from datetime import datetime, timedelta
import random
import string

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏"""
    app = create_app()
    
    with app.app_context():
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö cysu")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîß –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        test_database_connection()
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìù –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        test_data = create_test_data()
        
        # –¢–µ—Å—Ç 3: –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
        print(f"\nüîó –¢–µ—Å—Ç 3: –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏")
        test_model_relationships(test_data)
        
        # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        print(f"\n‚úÖ –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        test_data_validation()
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        print(f"\n‚ö° –¢–µ—Å—Ç 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤")
        test_query_performance()
        
        # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìä –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        test_database_statistics()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cleanup_test_data(test_data)
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with db.engine.connect() as conn:
            result = conn.execute(db.text("SELECT 1"))
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        with db.engine.connect() as conn:
            result = conn.execute(db.text("SELECT name FROM sqlite_master WHERE type='table'"))
            tables = [row[0] for row in result]
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"      - {table}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    test_data = {}
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = f"test_db_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        user = User(
            username=username,
            email=f"{username}@test.com",
            password=generate_password_hash("test123"),
            is_verified=True,
            is_subscribed=True,
            subscription_expires=datetime.utcnow() + timedelta(days=30)
        )
        db.session.add(user)
        db.session.commit()
        test_data['user'] = user
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        subject = Subject(
            title=f"–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç {datetime.now().strftime('%H%M%S')}",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞",
            created_by=user.id
        )
        db.session.add(subject)
        db.session.commit()
        test_data['subject'] = subject
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject.title}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials = []
        for i in range(3):
            material = Material(
                title=f"–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª {i+1}",
                description=f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {i+1}",
                type="lecture" if i % 2 == 0 else "assignment",
                subject_id=subject.id,
                created_by=user.id
            )
            db.session.add(material)
            materials.append(material)
        
        db.session.commit()
        test_data['materials'] = materials
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(materials)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∏–∫–µ—Ç
        ticket = Ticket(
            subject="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–∏–∫–µ—Ç",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞",
            user_id=user.id,
            status="open"
        )
        db.session.add(ticket)
        db.session.commit()
        test_data['ticket'] = ticket
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∏–∫–µ—Ç: {ticket.subject}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        message = TicketMessage(
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ",
            ticket_id=ticket.id,
            user_id=user.id,
            is_admin=False
        )
        db.session.add(message)
        db.session.commit()
        test_data['message'] = message
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        payment = Payment(
            user_id=user.id,
            amount=99.0,
            currency="RUB",
            status="succeeded",
            yookassa_payment_id=f"test_payment_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        )
        db.session.add(payment)
        db.session.commit()
        test_data['payment'] = payment
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: {payment.amount}‚ÇΩ")
        
        return test_data
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def test_model_relationships(test_data):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
    try:
        user = test_data.get('user')
        subject = test_data.get('subject')
        materials = test_data.get('materials', [])
        ticket = test_data.get('ticket')
        payment = test_data.get('payment')
        
        if not user:
            print("   ‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"   üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –ø—Ä–µ–¥–º–µ—Ç—ã
        user_subjects = Subject.query.filter_by(created_by=user.id).all()
        print(f"      üìö –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_subjects)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –ø—Ä–µ–¥–º–µ—Ç -> –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if subject:
            subject_materials = Material.query.filter_by(subject_id=subject.id).all()
            print(f"      üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–µ–¥–º–µ—Ç–∞: {len(subject_materials)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Ç–∏–∫–µ—Ç—ã
        user_tickets = Ticket.query.filter_by(user_id=user.id).all()
        print(f"      üé´ –¢–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_tickets)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Ç–∏–∫–µ—Ç -> —Å–æ–æ–±—â–µ–Ω–∏—è
        if ticket:
            ticket_messages = TicketMessage.query.filter_by(ticket_id=ticket.id).all()
            print(f"      üí¨ –°–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {len(ticket_messages)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –ø–ª–∞—Ç–µ–∂–∏
        user_payments = Payment.query.filter_by(user_id=user.id).all()
        print(f"      üí∞ –ü–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_payments)}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–µ–π: {e}")

def test_data_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
        try:
            duplicate_user = User(
                username="admin",  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                email="duplicate@test.com",
                password="test123"
            )
            db.session.add(duplicate_user)
            db.session.commit()
            print("      ‚ùå –û—à–∏–±–∫–∞: –î—É–±–ª–∏–∫–∞—Ç username –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print("      ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è username —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            db.session.rollback()
        
        # –¢–µ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        try:
            invalid_user = User(
                username="",  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ
                email="test@test.com",
                password="test123"
            )
            db.session.add(invalid_user)
            db.session.commit()
            print("      ‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π username –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print("      ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            db.session.rollback()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

def test_query_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        print(f"   ‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π
        import time
        start_time = time.time()
        user_count = User.query.count()
        end_time = time.time()
        print(f"      üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count} ({(end_time - start_time)*1000:.2f}ms)")
        
        # –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        active_users = User.query.filter_by(is_verified=True, is_subscribed=True).all()
        end_time = time.time()
        print(f"      üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(active_users)} ({(end_time - start_time)*1000:.2f}ms)")
        
        # –¢–µ—Å—Ç JOIN –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        materials_with_subjects = db.session.query(Material, Subject).join(Subject).limit(10).all()
        end_time = time.time()
        print(f"      üîó JOIN –∑–∞–ø—Ä–æ—Å: {len(materials_with_subjects)} –∑–∞–ø–∏—Å–µ–π ({(end_time - start_time)*1000:.2f}ms)")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

def test_database_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        models = [
            (User, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            (Subject, "–ü—Ä–µ–¥–º–µ—Ç—ã"),
            (Material, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
            (Submission, "–†–µ—à–µ–Ω–∏—è"),
            (Payment, "–ü–ª–∞—Ç–µ–∂–∏"),
            (Ticket, "–¢–∏–∫–µ—Ç—ã"),
            (TicketMessage, "–°–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤"),
            (Notification, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            (ChatMessage, "–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞")
        ]
        
        for model, name in models:
            try:
                count = model.query.count()
                print(f"      {name}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ {name}: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        verified_users = User.query.filter_by(is_verified=True).count()
        subscribed_users = User.query.filter_by(is_verified=True, is_subscribed=True).count()
        admin_users = User.query.filter_by(is_admin=True).count()
        
        print(f"      ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {verified_users}")
        print(f"      üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed_users}")
        print(f"      üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def cleanup_test_data(test_data):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        user = test_data.get('user')
        if user:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            TicketMessage.query.filter_by(user_id=user.id).delete()
            Payment.query.filter_by(user_id=user.id).delete()
            Ticket.query.filter_by(user_id=user.id).delete()
            Material.query.filter_by(created_by=user.id).delete()
            Subject.query.filter_by(created_by=user.id).delete()
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.session.delete(user)
            db.session.commit()
            
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        test_database()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
