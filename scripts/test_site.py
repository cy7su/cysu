# cysu v1.5.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞ cysu

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_site.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –†–∞–±–æ—Ç—É –º–æ–¥–µ–ª–µ–π
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- Email —Å–µ—Ä–≤–∏—Å
- –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app import create_app, db
from app.models import User, Subject, Material, Submission, Payment, ChatMessage, Ticket
from app.utils.email_service import EmailService
from app.utils.file_storage import FileStorageManager
from app.utils.payment_service import YooKassaService
from datetime import datetime, timedelta


def test_site_functionality() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–π—Ç–∞"""
    app = create_app()
    
    with app.app_context():
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ cysu")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüóÑÔ∏è  –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        test_database_connection()
        
        # –¢–µ—Å—Ç 2: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìä –¢–µ—Å—Ç 2: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
        test_data_models()
        
        # –¢–µ—Å—Ç 3: Email —Å–µ—Ä–≤–∏—Å
        print(f"\nüìß –¢–µ—Å—Ç 3: Email —Å–µ—Ä–≤–∏—Å")
        test_email_service()
        
        # –¢–µ—Å—Ç 4: –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        print(f"\nüìÅ –¢–µ—Å—Ç 4: –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        test_file_storage()
        
        # –¢–µ—Å—Ç 5: –ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        print(f"\nüí≥ –¢–µ—Å—Ç 5: –ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
        test_payment_service()
        
        # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞
        print(f"\nüìà –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞")
        test_site_statistics()
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def test_database_connection() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with db.engine.connect() as conn:
            conn.execute(db.text("SELECT 1"))
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        with db.engine.connect() as conn:
            result = conn.execute(db.text("SELECT name FROM sqlite_master WHERE type='table'"))
            tables = [row[0] for row in result]
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"      - {table}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")


def test_data_models() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        models = [
            (User, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            (Subject, "–ü—Ä–µ–¥–º–µ—Ç—ã"),
            (Material, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
            (Submission, "–†–µ—à–µ–Ω–∏—è"),
            (Payment, "–ü–ª–∞—Ç–µ–∂–∏"),
            (ChatMessage, "–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"),
            (Ticket, "–¢–∏–∫–µ—Ç—ã")
        ]
        
        for model, name in models:
            try:
                count = model.query.count()
                print(f"   üìä {name}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ {name}: {e}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")


def test_email_service() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç email —Å–µ—Ä–≤–∏—Å"""
    try:
        email_service = EmailService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from flask import current_app
        mail_config = {
            'MAIL_SERVER': current_app.config.get('MAIL_SERVER'),
            'MAIL_PORT': current_app.config.get('MAIL_PORT'),
            'MAIL_USE_TLS': current_app.config.get('MAIL_USE_TLS'),
            'MAIL_USERNAME': current_app.config.get('MAIL_USERNAME')
        }
        
        print("   üìß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è email:")
        for key, value in mail_config.items():
            print(f"      {key}: {value}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ email (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        test_email = "test@example.com"
        test_code = "123456"
        
        print(f"   ‚úÖ Email —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üìù –¢–µ—Å—Ç–æ–≤—ã–π email: {test_email}")
        print(f"   üî¢ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥: {test_code}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ email —Å–µ—Ä–≤–∏—Å–∞: {e}")


def test_file_storage() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
        folders = [
            "app/static/uploads",
            "app/static/chat_files", 
            "app/static/ticket_files"
        ]
        
        print("   üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫:")
        for folder in folders:
            folder_path = Path(folder)
            if folder_path.exists():
                file_count = len(list(folder_path.glob("*")))
                print(f"      ‚úÖ {folder}: {file_count} —Ñ–∞–π–ª–æ–≤")
            else:
                print(f"      ‚ùå {folder}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–π
        test_path, test_rel_path = FileStorageManager.get_material_upload_path(1, "test.txt")
        print(f"   üîß –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
        print(f"      –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {test_path}")
        print(f"      –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: {test_rel_path}")
        
        test_path, test_rel_path = FileStorageManager.get_subject_upload_path(1, 2, "solution.txt")
        print(f"   üîß –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:")
        print(f"      –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {test_path}")
        print(f"      –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: {test_rel_path}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")


def test_payment_service() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    try:
        payment_service = YooKassaService()
        
        print("   üí≥ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:")
        print(f"      Shop ID: {payment_service.shop_id}")
        print(f"      –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: {payment_service.simulation_mode}")
        print(f"      Base URL: {payment_service.base_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
        from flask import current_app
        prices = current_app.config.get('SUBSCRIPTION_PRICES', {})
        print(f"   üí∞ –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:")
        for period, price in prices.items():
            print(f"      {period} –º–µ—Å—è—Ü(–µ–≤): {price}‚ÇΩ")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")


def test_site_statistics() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–π—Ç–∞"""
    try:
        print("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞:")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = User.query.count()
        verified_users = User.query.filter_by(is_verified=True).count()
        subscribed_users = User.query.filter_by(is_subscribed=True).count()
        admin_users = User.query.filter_by(is_admin=True).count()
        
        print(f"      üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"      ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {verified_users}")
        print(f"      üí≥ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed_users}")
        print(f"      üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        total_subjects = Subject.query.count()
        total_materials = Material.query.count()
        total_submissions = Submission.query.count()
        total_tickets = Ticket.query.count()
        
        print(f"      üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {total_subjects}")
        print(f"      üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_materials}")
        print(f"      üìù –†–µ—à–µ–Ω–∏–π: {total_submissions}")
        print(f"      üé´ –¢–∏–∫–µ—Ç–æ–≤: {total_tickets}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        total_payments = Payment.query.count()
        successful_payments = Payment.query.filter_by(status='succeeded').count()
        
        print(f"      üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}")
        print(f"      ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_payments}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        recent_users = User.query.limit(3).all()
        print(f"      üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for user in recent_users:
            print(f"         - {user.username}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        test_site_functionality()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 