name: 🚀 Build & Deploy

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: cysu

jobs:
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8
    
    - name: 🔍 Code quality check
      run: |
        echo "🔍 Running flake8 analysis..."
        flake8 app/ run.py --max-line-length=120 --ignore=E501,W503,W293,W291,W292,E302,E303,E305,F401,F841,E402,F541,E128,W391
        echo "✅ Code quality check passed"
    
    - name: 🧪 Run tests
      run: |
        echo "🧪 Running basic tests..."
        python -c "import app; print('✅ App imports successfully')"
        echo "✅ Basic tests passed"

  build:
    name: 🐳 Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  release:
    name: 🚀 Create Release & Package
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true'
    outputs:
      version: ${{ steps.version.outputs.new_version }}
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔧 Setup Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
    
    - name: 📈 Calculate version
      id: version
      run: |
        # Получаем последний тег
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "📌 Last tag: $LAST_TAG"
        
        # Парсим версию
        IFS='.' read -r major minor patch <<< "$LAST_TAG"
        
        # Увеличиваем версию в зависимости от выбранного типа
        case "${{ github.event.inputs.version_type }}" in
          "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "minor")
            minor=$((minor + 1))
            patch=0
            ;;
          "patch")
            patch=$((patch + 1))
            ;;
        esac
        
        NEW_VERSION="$major.$minor.$patch"
        echo "🎯 New version: $NEW_VERSION (increment: ${{ github.event.inputs.version_type }})"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: 📦 Create source package
      run: |
        echo "📦 Creating source package..."
        # Создаем временную директорию для архивации
        mkdir -p temp_package
        # Копируем файлы, исключая ненужные
        rsync -av --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.env' \
          --exclude='app.db' \
          --exclude='logs' \
          --exclude='temp_package' \
          --exclude='.github/workflows' \
          . temp_package/
        # Создаем архив из временной директории
        tar -czf cysu-v${{ steps.version.outputs.new_version }}.tar.gz -C temp_package .
        # Удаляем временную директорию
        rm -rf temp_package
        echo "✅ Source package created: cysu-v${{ steps.version.outputs.new_version }}.tar.gz"
    
    - name: 📦 Publish to GitHub Packages
      run: |
        echo "📦 Publishing to GitHub Packages..."
        # Создаем package.json для npm package
        cat > package.json << EOF
        {
          "name": "@${{ github.repository_owner }}/cysu",
          "version": "${{ steps.version.outputs.new_version }}",
          "description": "Modern educational platform - cysu",
          "main": "run.py",
          "scripts": {
            "start": "python run.py"
          },
          "repository": {
            "type": "git",
            "url": "https://github.com/${{ github.repository }}.git"
          },
          "keywords": ["education", "platform", "flask", "python"],
          "author": "${{ github.actor }}",
          "license": "MIT",
          "files": [
            "app/",
            "run.py",
            "requirements.txt",
            "Dockerfile",
            "README.md"
          ]
        }
        EOF
        
        # Создаем .npmrc для GitHub Packages
        echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
        
        # Публикуем пакет
        npm publish
        echo "✅ Package published to GitHub Packages"
    
    - name: 📝 Create GitHub Release with Package
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: cysu-v${{ steps.version.outputs.new_version }}.tar.gz
        tag_name: v${{ steps.version.outputs.new_version }}
        name: 🚀 Release v${{ steps.version.outputs.new_version }}
        generate_release_notes: true
        body: |
          ## 🎉 New Release v${{ steps.version.outputs.new_version }}
          
          ### ✅ Quality Checks
          - **Code Quality**: All flake8 checks passed
          - **Python Version**: 3.11
          - **Tests**: Basic import tests passed
          
          ### 🐳 Docker Images
          - **Latest**: `${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest`
          - **Tagged**: `${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`
          
          ### 📦 Packages
          - **Source Code**: `cysu-v${{ steps.version.outputs.new_version }}.tar.gz`
          - **NPM Package**: `@${{ github.repository_owner }}/cysu@${{ steps.version.outputs.new_version }}`
          
          ### 🚀 How to use
          ```bash
          # Pull latest image
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Run container
          docker run -d -p 8001:8001 \
            -e SECRET_KEY=your-secret-key \
            -e DATABASE_URL=sqlite:///app.db \
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          ### 📦 Install from GitHub Packages
          ```bash
          # Configure npm for GitHub Packages
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" >> .npmrc
          
          # Install package
          npm install @${{ github.repository_owner }}/cysu@${{ steps.version.outputs.new_version }}
          ```
          
          ---
          *🤖 This release was created automatically by GitHub Actions*
        draft: false
        prerelease: false

  deploy:
    name: 🚀 Deploy Summary
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: 📊 Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🐳 Docker Image: ${{ needs.build.outputs.image }}"
        echo "📝 Digest: ${{ needs.build.outputs.digest }}"
        echo "🏷️ Commit: ${{ github.sha }}"
        echo "🔗 Repository: https://github.com/${{ github.repository }}"
        
        if [ "${{ needs.release.result }}" == "success" ]; then
          echo "🚀 Release created: v${{ needs.release.outputs.version }}"
          echo "📦 Package: cysu-v${{ needs.release.outputs.version }}.tar.gz"
          echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.version }}"
        else
          echo "ℹ️ No release created (disabled or failed)"
        fi