name: üêç Pylint & üöÄ Release

on:
  push:
    branches: [ TEST ]
  pull_request:
    branches: [ TEST ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: cysu

jobs:
  pylint:
    name: ÔøΩÔøΩ Code Quality Check
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.pylint.outputs.success }}
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: ÔøΩÔøΩ Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        echo "üîß Installing pylint..."
        pip install --upgrade pip
        pip install pylint
        echo "‚úÖ Dependencies installed"
    
    - name: üîç Run pylint analysis
      id: pylint
      run: |
        echo "üîç Starting pylint analysis..."
        echo "üìä Analyzing Python files..."
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        PYTHON_FILES=$(find . -name "*.py" -not -path "./.*" -not -path "./venv/*" -not -path "./.venv/*" | head -50)
        
        if [ -z "$PYTHON_FILES" ]; then
          echo "‚ö†Ô∏è No Python files found to analyze"
          echo "success=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "ÔøΩÔøΩ Found Python files:"
        echo "$PYTHON_FILES" | sed 's/^/  - /'
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º pylint —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        pylint --disable=all --enable=E,W,F --disable=unused-import \
               --score=yes --reports=yes \
               $PYTHON_FILES > pylint-report.txt 2>&1
        
        PYLINT_EXIT_CODE=$?
        
        echo "üìã Pylint Report:"
        echo "=================="
        cat pylint-report.txt
        echo "=================="
        
        if [ $PYLINT_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Pylint passed successfully!"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Pylint found issues"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: üìä Upload pylint report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pylint-report
        path: pylint-report.txt

  release:
    name: üöÄ Build & Release
    needs: pylint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test' && needs.pylint.outputs.success == 'true'
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      docker_image: ${{ steps.docker.outputs.image }}
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üîß Setup Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        echo "‚úÖ Git configured"
    
    - name: üìà Calculate next version
      id: version
      run: |
        echo "üîç Analyzing version history..."
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "üìå Last tag: $LAST_TAG"
        
        # –ü–∞—Ä—Å–∏–º –≤–µ—Ä—Å–∏—é
        IFS='.' read -r major minor patch <<< "$LAST_TAG"
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é
        patch=$((patch + 1))
        
        # –ï—Å–ª–∏ patch > 16, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º minor
        if [ $patch -gt 16 ]; then
          echo "üîÑ Patch version exceeded 16, incrementing minor version"
          patch=0
          minor=$((minor + 1))
        fi
        
        NEW_VERSION="$major.$minor.$patch"
        echo "üéØ New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "major=$major" >> $GITHUB_OUTPUT
        echo "minor=$minor" >> $GITHUB_OUTPUT
        echo "patch=$patch" >> $GITHUB_OUTPUT
    
    - name: üè∑Ô∏è Create and push tag
      run: |
        TAG_NAME="v${{ steps.version.outputs.new_version }}"
        echo "üè∑Ô∏è Creating tag: $TAG_NAME"
        
        git tag -a "$TAG_NAME" -m "üöÄ Release $TAG_NAME
        
        üì¶ Changes in this release:
        - Code quality checks passed ‚úÖ
        - Docker image built and pushed üê≥
        - Automated release via GitHub Actions ü§ñ
        
        ÔøΩÔøΩ Version: ${{ steps.version.outputs.new_version }}
        üêç Python: 3.11
        üîç Pylint: Passed"
        
        git push origin "$TAG_NAME"
        echo "‚úÖ Tag $TAG_NAME pushed successfully"
    
    - name: ÔøΩÔøΩ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üîê Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: üèóÔ∏è Build and push Docker image
      id: docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: üìù Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        release_name: ÔøΩÔøΩ Release v${{ steps.version.outputs.new_version }}
        body: |
          ## üéâ New Release v${{ steps.version.outputs.new_version }}
          
          ### ‚úÖ Quality Checks
          - **Pylint**: All code quality checks passed
          - **Python Version**: 3.11
          - **Analysis**: No critical issues found
          
          ### üê≥ Docker Images
          - **Image**: `${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}`
          - **Latest**: `${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest`
          
          ### üìä Version Info
          - **Previous**: ${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
          - **Current**: ${{ steps.version.outputs.new_version }}
          - **Increment**: Patch version
          
          ### üöÄ How to use
          ```bash
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
          docker run -d ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
          ```
          
          ---
          *ü§ñ This release was created automatically by GitHub Actions*
        draft: false
        prerelease: false
    
    - name: üìä Release Summary
      run: |
        echo "üéâ Release completed successfully!"
        echo "üìå Version: v${{ steps.version.outputs.new_version }}"
        echo "üê≥ Docker Image: ${{ steps.docker.outputs.image }}"
        echo "üè∑Ô∏è Tag: v${{ steps.version.outputs.new_version }}"
        echo "üìù Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }}"

  notify:
    name: üì¢ Notifications
    needs: [pylint, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: üìä Job Summary
      run: |
        echo "## üìä Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ÔøΩÔøΩ Pylint Status: ${{ needs.pylint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Release Status: ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.pylint.result }}" == "success" ]; then
          echo "‚úÖ **Code quality checks passed**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Code quality checks failed**" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.release.result }}" == "success" ]; then
          echo "‚úÖ **Release created successfully**" >> $GITHUB_STEP_SUMMARY
          echo "üìå **Version**: v${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "üê≥ **Docker Image**: ${{ needs.release.outputs.docker_image }}" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.release.result }}" == "skipped" ]; then
          echo "‚è≠Ô∏è **Release skipped** (pylint failed or not on test branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Release failed**" >> $GITHUB_STEP_SUMMARY
        fi
